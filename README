=== Funkenschlag ===
the process of generating a spark, lit. "spark punch"

----
Stefan Tomanek <stefan+funkenschlag@pico.ruhr.de>
https://github.com/wertarbyte/funkenschlag
----

== What is Funkenschlag?

Funkenschlag is a simple firmware for use in RC model transmitters.  It uses an
ATMega microcontroller to query the controls present in such devices and
generate the PPM signal fed to the radio transmitter module.

== What is required to use Funkenschlag?

An ATMega microcontroller (e.g. ATMega8, ATMega168 or ATMega328) is required to
run the program itself; any radio module processing PPM input should be suitable
to transmit the signal generated by the controller.
Funkenschlag supports analog control sticks as well as digital switches and a few
other control devices you can build your TX from.

== What was the intention of developing Funkenschlag?

I wrote the firmware to replace the puny electronics present in my cheap 6ch
TX[1]. While the device itself was advertised as being able to process 6
channels, the transmitter module is capable of transmitting at least 8 channls
if such a signal is fed to it. I also added several other inputs and sensors to
the TX as well as implemented a serial data link nicknamed "Datenschlag".

== What is "Datenschlag"?

Datenschlag ("data punch") is a serial protocol that utilizes one servo channel
to encode and transmit arbitrary binary data. This data stream can contain
information about switch positions, magnetic bearing of the TX, additional
servo commands for camera positioning or any other instruction for the vehicle.
The receiver has to decode this data stream to obtain the instruction. My fork
of the popular multirotor project Multiwii[2] contains such code so that e.g.
up to 8 AUX switches can be operated without the need for additional servo
channels.

== What other hardware can be put into the transmitter?

My transmitter employs a PCF8591 I²C ADC chip to query additional analog
inputs as well as an HMC5883 magnetometer to constantly measure the bearing of
TX and pilot; this bearing can then be transmitted to the quadcopter (using
Datenschlag) to adjust control commands if in HEADFREE mode. For reliable
compass measurements, an accelerometer is needed to provide tilt compensation.
The TX status can be displayed on an alphanumeric I²C display; support for
connecting a Wii nunchuk is also present, making it possible to control the
system using the accelerometer and/or joystick.

== Is it free?

Yes, the entire source code is licenced under the conditions of the GPLv3.

== So what hardware is supported right now?

Microcontroller:
  * ATMega8
  * ATMega168/ATMega328

External ADC (needed if more than 4 analog inputs and TWI are to be used):
  * PCF8591 (I²C)

Display:
  * ST7032 alphanumeric 8x2 I²C display

Magnetometer:
  * HMMC5883 (I²C)

Accelerometer:
  * ADXL345 (I²C)

Additional input devices:
  * Wii Nunchuk Accelerometer and joystick (I²C)

== Is there a schematic?

Sure, see the link[1].

------
[1] http://stefans.datenbruch.de/avr/funkenschlag/funkenschlag-schematic.png
[2] https://github.com/wertarbyte/multiwii-firmware/blob/master/Datenschlag.ino
